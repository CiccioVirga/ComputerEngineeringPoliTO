
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Vector;
import java.util.Iterator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\007\007\000\002\010" +
    "\003\000\002\010\003\000\002\017\004\000\002\012\010" +
    "\000\002\012\007\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\010\000\002\015\005\000\002" +
    "\016\005\000\002\020\005\000\002\020\010\000\002\011" +
    "\002\000\002\011\005\000\002\011\005\000\002\004\005" +
    "\000\002\004\005\000\002\006\006\000\002\005\006\000" +
    "\002\005\010\000\002\002\003\000\002\002\004\000\002" +
    "\003\010\000\002\021\004\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\006\005\013\004\001\002\000\004\005" +
    "\106\001\002\000\004\005\101\001\002\000\006\006\061" +
    "\013\060\001\002\000\004\002\056\001\002\000\004\015" +
    "\ufffe\001\002\000\004\015\uffff\001\002\000\004\015\013" +
    "\001\002\000\004\016\016\001\002\000\006\015\035\016" +
    "\016\001\002\000\004\016\016\001\002\000\004\007\017" +
    "\001\002\000\004\017\021\001\002\000\006\005\026\012" +
    "\025\001\002\000\004\016\022\001\002\000\004\020\023" +
    "\001\002\000\004\011\024\001\002\000\006\005\uffec\012" +
    "\uffec\001\002\000\004\017\027\001\002\000\006\015\uffed" +
    "\016\uffed\001\002\000\004\016\030\001\002\000\004\020" +
    "\031\001\002\000\004\011\032\001\002\000\006\005\uffeb" +
    "\012\uffeb\001\002\000\004\016\016\001\002\000\006\015" +
    "\uffef\016\uffef\001\002\000\004\016\042\001\002\000\004" +
    "\016\016\001\002\000\006\015\uffee\016\uffee\001\002\000" +
    "\006\002\uffea\016\uffea\001\002\000\006\002\000\016\042" +
    "\001\002\000\004\017\043\001\002\000\004\010\044\001" +
    "\002\000\004\007\045\001\002\000\004\016\046\001\002" +
    "\000\004\017\054\001\002\000\006\005\051\012\050\001" +
    "\002\000\004\016\052\001\002\000\006\002\uffe8\016\uffe8" +
    "\001\002\000\004\017\053\001\002\000\006\005\uffe6\012" +
    "\uffe6\001\002\000\006\005\uffe7\012\uffe7\001\002\000\006" +
    "\002\uffe9\016\uffe9\001\002\000\004\002\001\001\002\000" +
    "\004\015\ufffd\001\002\000\004\005\074\001\002\000\004" +
    "\005\071\001\002\000\004\015\ufff8\001\002\000\006\013" +
    "\060\015\ufffa\001\002\000\006\013\065\015\ufff9\001\002" +
    "\000\004\005\066\001\002\000\004\015\ufff5\001\002\000" +
    "\004\013\060\001\002\000\006\013\ufff6\015\ufff6\001\002" +
    "\000\004\006\072\001\002\000\004\005\073\001\002\000" +
    "\006\006\ufffb\013\ufffb\001\002\000\004\013\075\001\002" +
    "\000\004\005\076\001\002\000\004\013\077\001\002\000" +
    "\004\005\100\001\002\000\006\013\ufff7\015\ufff7\001\002" +
    "\000\004\006\102\001\002\000\004\005\103\001\002\000" +
    "\004\006\104\001\002\000\004\005\105\001\002\000\006" +
    "\006\ufffc\013\ufffc\001\002\000\012\006\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\001\002\000\012\006\112\013\111\014\110" +
    "\015\ufff4\001\002\000\004\005\116\001\002\000\004\005" +
    "\114\001\002\000\004\005\113\001\002\000\012\006\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\001\002\000\010\006\ufff2\014" +
    "\ufff2\015\ufff2\001\002\000\010\006\112\014\110\015\ufff3" +
    "\001\002\000\012\006\ufff0\013\ufff0\014\ufff0\015\ufff0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\014\007\006\010\011\012\005\017\010\020" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\056\014\062\015\063\016\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\013\006\014\001\001\000\004\006\035\001" +
    "\001\000\004\006\032\001\001\000\002\001\001\000\004" +
    "\005\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\033" +
    "\001\001\000\002\001\001\000\006\002\040\003\037\001" +
    "\001\000\004\006\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\114\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // external key :dressname
    // internal key: prodname
    symbol_table = new HashMap<String, HashMap<String, Double>>();

    /* new HashMap made of String and Hashmap of String and Integer
    symbol_table = new HashMap<String, Integer>();         // REMEMBER TO DECLARE IT ALSO IN THE PARSER CODE UNDER (line 21)
    
    /* v1 = new Integer(0); GLOBAL INTEGERS (line 22)
    v2 = new Integer(0); */

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap symbol_table;

   /* public HashMap <String, Integer> table;
    public int v1;
    public int v2; */

    public void syntax_error(Symbol current_symbol) {
      StringBuffer m = new StringBuffer("Error");

      if (current_symbol.left != -1) {                
        m.append(" in line " + (current_symbol.left+1));   
	  m.append(", column " + (current_symbol.right+1));
      }
      m.append(", symbol: " + (current_symbol));
      m.append(" : Syntax Error");
   
  	System.err.println(m);
    } 

    public Object stack(int position) {
      return (((Symbol)stack.elementAt(tos+position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public class NameClass{
      private Integer att1;
      private String att2;
      NameClass(Integer a, String b){
        this.att1 = a;
        this.att2 = b;
      }
      Integer getAtt1(){
        return this.att1;
      }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP dresses_section SEP shopping_section 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header2 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header1 ::= odd_tok1 tok2_header1 
            { parser.Tree.reduce(2,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // odd_tok1 ::= TOK1 S TOK1 S TOK1 S 
            { parser.Tree.reduce(6,"odd_tok1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("odd_tok1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // odd_tok1 ::= odd_tok1 TOK1 S TOK1 S 
            { parser.Tree.reduce(5,"odd_tok1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("odd_tok1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok2_header1 ::= three_token2 
            { parser.Tree.reduce(1,"tok2_header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_header1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok2_header1 ::= nine_token2 
            { parser.Tree.reduce(1,"tok2_header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_header1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok2_header1 ::= ten_token2 
            { parser.Tree.reduce(1,"tok2_header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_header1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // three_token2 ::= TOK2 S TOK2 S TOK2 S 
            { parser.Tree.reduce(6,"three_token2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("three_token2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nine_token2 ::= three_token2 three_token2 three_token2 
            { parser.Tree.reduce(3,"nine_token2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nine_token2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ten_token2 ::= nine_token2 TOK2 S 
            { parser.Tree.reduce(3,"ten_token2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ten_token2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header2 ::= TOK2 S anytok13 
            { parser.Tree.reduce(3,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // header2 ::= TOK2 S anytok13 TOK2 S anytok13 
            { parser.Tree.reduce(6,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // anytok13 ::= 
            { parser.Tree.reduce(0,"anytok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anytok13",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // anytok13 ::= anytok13 TOK1 S 
            { parser.Tree.reduce(3,"anytok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anytok13",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // anytok13 ::= anytok13 TOK3 S 
            { parser.Tree.reduce(3,"anytok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anytok13",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dresses_section ::= dresses dresses dresses 
            { parser.Tree.reduce(3,"dresses_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dresses_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dresses_section ::= dresses_section dresses dresses 
            { parser.Tree.reduce(3,"dresses_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dresses_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dresses ::= QSTRING MINUS prod_list S 
            { parser.Tree.reduce(4,"dresses",0);
              Object RESULT =null;
		int dress_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dress_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dress_name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int innerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int innerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inner = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             HashMap<String, Double> inner_hm = (HashMap<String, Double>) inner;
             parser.symbol_table.put(((String) dress_name), inner_hm);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dresses",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prod_list ::= INT QSTRING REAL EUROWORD 
            { parser.Tree.reduce(4,"prod_list",0);
              Object RESULT =null;
		int prod_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prod_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer prod_id = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prodnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prodnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object prodname = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prod_costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prod_costright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double prod_cost = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            /* create inner_hm bc it's first prod */
            HashMap<String, Double> inner_hm =new HashMap<String, Double>();
            inner_hm.put(((String) prodname), (((Double) prod_cost)));
            RESULT = inner_hm;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prod_list ::= prod_list CM INT QSTRING REAL EUROWORD 
            { parser.Tree.reduce(6,"prod_list",0);
              Object RESULT =null;
		int innerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int innerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object inner = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int prod_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prod_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer prod_id = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prodnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prodnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object prodname = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prod_costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prod_costright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double prod_cost = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             /*Casting hashmap */
             HashMap<String, Double> inner_hm = (HashMap<String, Double>) inner;
             inner_hm.put(((String) prodname), (((Double) prod_cost)));
             RESULT = inner_hm;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // shopping_section ::= purchasing 
            { parser.Tree.reduce(1,"shopping_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shopping_section",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // shopping_section ::= shopping_section purchasing 
            { parser.Tree.reduce(2,"shopping_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shopping_section",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // purchasing ::= QSTRING INT PERC MINUS list_purch_prod S 
            { parser.Tree.reduce(6,"purchasing",1);
              Object RESULT =null;
		int dress_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dress_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object dress_name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int percentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int percentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer percent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int obj_resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int obj_resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] obj_res = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*    Double total = ((Double) obj_res[0]);
                Integer nprod = ((Integer) obj_res[1]); */
                Object[] final_res = new Object[2];
                final_res = (Object[]) obj_res;
                System.out.println("TOTAL : " + final_res[0] + " euro N_PROD : " + final_res[1]);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("purchasing",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_purch_prod ::= QSTRING INT 
            { parser.Tree.reduce(2,"list_purch_prod",0);
              Object[] RESULT =null;
		int prod_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prod_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prod_name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int quantityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int quantityright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer quantity = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    String dress_x = (String) parser.stack((-5));
                    String prod_x = (String) prod_name;
                    /* percent is at parser.stack(-4)); */
                    Integer percent_x = (Integer) parser.stack((-4));
                    /*i retrieve the price */
                    Integer quantity_x = (Integer) quantity;
                    Double price_x = (Double) (((HashMap<String, Double>) parser.symbol_table.get(dress_x)).get(prod_x));
                    System.out.println(" " + dress_x); 
                    Double result = price_x * quantity_x * percent_x / 100;
                    System.out.println(" " + prod_x + " " + result + " euro");
                    Object[] res_obj = new Object[2];
                    res_obj[0] = result;
                    res_obj[1] = quantity;
              //      System.out.println("Obj[0] :" + res_obj[0] + " obj[1] " + res_obj[1]);
                    RESULT = res_obj; 
                /*     RESULT = result; */
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_purch_prod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list_purch_prod ::= list_purch_prod CM QSTRING INT 
            { parser.Tree.reduce(4,"list_purch_prod",0);
              Object[] RESULT =null;
		int vect_objleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vect_objright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object[] vect_obj = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prod_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prod_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prod_name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int quantityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int quantityright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer quantity = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String dress_x = (String) parser.stack((-7));
                    String prod_x = (String) prod_name;
                    /* percent is at parser.stack(-4)); */
                    Integer percent_x = (Integer) parser.stack((-6));
                    /*i retrieve the price */
                    Integer quantity_x = (Integer) quantity;
              
                    Double price_x = (Double) (((HashMap<String, Double>) parser.symbol_table.get(dress_x)).get(prod_x));
                    Double result = price_x * quantity_x * percent_x / 100;
                    System.out.println(" " + prod_x + " " + result + " euro");
                    Object[] res_obj = new Object[2];
                    res_obj = (Object[]) vect_obj;
                    Double curr_casted =((Double) res_obj[0]);
                    Integer nprod_curr = ((Integer) res_obj[1]);
                    res_obj[0] = ((Double) curr_casted) + result;
                    res_obj[1] = nprod_curr + quantity;
               //     System.out.println("Obj[0] :" + res_obj[0] + " obj[1] " + res_obj[1]);
                    RESULT = res_obj; 
              /*      RESULT = ((Double) curr) + result;*/

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_purch_prod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
