
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\003\003\000\002\002" +
    "\006\000\002\002\007\000\002\004\011\000\002\020\003" +
    "\000\002\020\003\000\002\011\005\000\002\011\002\000" +
    "\002\006\004\000\002\006\005\000\002\012\010\000\002" +
    "\012\010\000\002\012\010\000\002\013\006\000\002\013" +
    "\004\000\002\007\005\000\002\007\004\000\002\010\014" +
    "\000\002\016\012\000\002\016\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\005\ufff9\006\ufff9\025\ufff9\001\002\000" +
    "\010\005\074\006\072\025\071\001\002\000\004\002\070" +
    "\001\002\000\004\010\007\001\002\000\004\011\012\001" +
    "\002\000\004\011\012\001\002\000\006\010\036\011\012" +
    "\001\002\000\006\012\013\024\014\001\002\000\004\012" +
    "\031\001\002\000\006\012\015\024\016\001\002\000\004" +
    "\013\026\001\002\000\004\013\017\001\002\000\004\014" +
    "\020\001\002\000\004\011\023\001\002\000\004\007\022" +
    "\001\002\000\006\010\ufff5\011\ufff5\001\002\000\006\007" +
    "\ufff2\017\024\001\002\000\004\014\020\001\002\000\004" +
    "\007\ufff3\001\002\000\004\014\020\001\002\000\004\007" +
    "\030\001\002\000\006\010\ufff4\011\ufff4\001\002\000\004" +
    "\013\032\001\002\000\004\014\020\001\002\000\004\007" +
    "\034\001\002\000\006\010\ufff6\011\ufff6\001\002\000\006" +
    "\010\ufff8\011\ufff8\001\002\000\006\002\uffff\020\037\001" +
    "\002\000\004\004\045\001\002\000\006\002\ufffe\020\037" +
    "\001\002\000\004\020\037\001\002\000\006\002\ufff0\020" +
    "\ufff0\001\002\000\004\020\037\001\002\000\006\002\ufff1" +
    "\020\ufff1\001\002\000\004\013\046\001\002\000\004\021" +
    "\047\001\002\000\004\013\050\001\002\000\004\004\051" +
    "\001\002\000\004\022\052\001\002\000\004\023\053\001" +
    "\002\000\004\014\054\001\002\000\004\013\057\001\002" +
    "\000\004\007\056\001\002\000\006\002\uffef\020\uffef\001" +
    "\002\000\004\004\060\001\002\000\004\013\061\001\002" +
    "\000\004\011\062\001\002\000\004\024\063\001\002\000" +
    "\006\007\uffed\017\064\001\002\000\004\014\054\001\002" +
    "\000\004\007\uffee\001\002\000\004\011\012\001\002\000" +
    "\006\010\ufff7\011\ufff7\001\002\000\004\002\001\001\002" +
    "\000\004\007\ufffb\001\002\000\004\007\ufffc\001\002\000" +
    "\004\007\076\001\002\000\004\007\075\001\002\000\012" +
    "\005\ufffa\006\ufffa\010\ufffa\025\ufffa\001\002\000\010\005" +
    "\ufff9\006\ufff9\025\ufff9\001\002\000\010\005\074\006\072" +
    "\025\071\001\002\000\004\007\101\001\002\000\006\005" +
    "\ufff9\010\ufff9\001\002\000\006\005\074\010\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\002\004\004\005\011\003\001\001\000" +
    "\004\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\010\012\007\001\001\000\004\012\065\001" +
    "\001\000\004\012\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\024\001\001\000\002\001\001\000\004\013\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\037\010\040\001\001\000" +
    "\002\001\001\000\004\010\042\001\001\000\004\010\041" +
    "\001\001\000\002\001\001\000\004\010\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\064\001\001\000\002\001\001\000\004\012" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\076\001\001\000\004" +
    "\020\077\001\001\000\002\001\001\000\004\011\101\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Double>>();

    }


    public HashMap<String, HashMap<String, Double>> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog_test ::= header 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_test",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= header DIVIDER currencies DIVIDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= header DIVIDER currencies DIVIDER auctions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= nt1 nt2 S nt1 nt2 S nt1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nt2 ::= TOK2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nt2 ::= NUM_BETWEEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nt1 ::= nt1 TOK1 S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nt1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // currencies ::= currencies currency 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("currencies",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // currencies ::= currency currency currency 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("currencies",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // currency ::= REAL ID ID COL user_list S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("currency",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // currency ::= REAL EURO_WD EURO_WD COL user_list S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("currency",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // currency ::= REAL EURO_WD ID COL user_list S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("currency",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // user_list ::= USERCODE REAL CM user_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // user_list ::= USERCODE REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // auctions ::= auctions auction auction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auctions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // auctions ::= auction auction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auctions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // auction ::= AUCTION_WD UINT COL QSTRING COL UINT MIN_WD ARR_WD advances S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // advances ::= USERCODE COL UINT COL REAL EURO_WD CM advances 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("advances",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // advances ::= USERCODE COL UINT COL REAL EURO_WD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("advances",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
