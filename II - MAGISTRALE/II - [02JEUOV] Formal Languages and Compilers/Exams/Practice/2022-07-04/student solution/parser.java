
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.Iterator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\005\000\002\006" +
    "\005\000\002\006\005\000\002\005\003\000\002\005\003" +
    "\000\002\007\004\000\002\007\006\000\002\007\014\000" +
    "\002\004\002\000\002\004\004\000\002\004\004\000\002" +
    "\010\010\000\002\003\003\000\002\003\003\000\002\011" +
    "\003\000\002\022\007\000\002\022\005\000\002\012\003" +
    "\000\002\012\003\000\002\023\002\000\002\013\006\000" +
    "\002\014\006\000\002\021\003\000\002\021\004\000\002" +
    "\020\010\000\002\020\010\000\002\017\005\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\006\006\005\007\004\001\002\000\010\005" +
    "\ufff8\006\ufff8\007\ufff8\001\002\000\004\006\112\001\002" +
    "\000\004\004\ufff3\001\002\000\004\002\111\001\002\000" +
    "\004\004\ufff4\001\002\000\010\005\077\006\076\007\075" +
    "\001\002\000\004\004\013\001\002\000\006\010\014\015" +
    "\020\001\002\000\004\024\071\001\002\000\010\002\uffee" +
    "\010\uffee\015\uffee\001\002\000\010\002\uffef\010\uffef\015" +
    "\uffef\001\002\000\010\002\ufff2\010\014\015\020\001\002" +
    "\000\014\010\030\017\032\020\034\025\031\026\035\001" +
    "\002\000\004\002\000\001\002\000\006\010\014\015\020" +
    "\001\002\000\006\010\014\015\020\001\002\000\006\010" +
    "\014\015\020\001\002\000\006\010\014\015\020\001\002" +
    "\000\010\002\ufff1\010\ufff1\015\ufff1\001\002\000\020\014" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\001\002\000\020\014\uffe2\021\uffe2\022\uffe2\023\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\001\002\000\014\010\030\017\032" +
    "\020\034\025\031\026\035\001\002\000\020\014\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\027\uffe5\030\uffe5\031\uffe5\001\002" +
    "\000\012\022\037\023\041\030\uffed\031\uffed\001\002\000" +
    "\020\014\uffe4\021\uffe4\022\uffe4\023\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\001\002\000\014\010\030\017\032\020\034\025" +
    "\031\026\035\001\002\000\010\022\037\023\041\027\040" +
    "\001\002\000\014\010\030\017\032\020\034\025\031\026" +
    "\035\001\002\000\020\014\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\001\002\000\014\010\030\017" +
    "\032\020\034\025\031\026\035\001\002\000\020\014\uffe0" +
    "\021\uffe0\022\037\023\uffe0\027\uffe0\030\uffe0\031\uffe0\001" +
    "\002\000\020\014\uffe1\021\uffe1\022\uffe1\023\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\001\002\000\010\016\uffea\030\uffea\031" +
    "\uffea\001\002\000\006\030\052\031\051\001\002\000\010" +
    "\016\047\030\uffed\031\uffed\001\002\000\010\002\uffeb\010" +
    "\uffeb\015\uffeb\001\002\000\010\016\uffe9\030\uffe9\031\uffe9" +
    "\001\002\000\014\010\030\017\032\020\034\025\031\026" +
    "\035\001\002\000\014\010\030\017\032\020\034\025\031" +
    "\026\035\001\002\000\010\014\054\022\037\023\041\001" +
    "\002\000\004\012\056\001\002\000\004\013\061\001\002" +
    "\000\004\011\057\001\002\000\004\021\060\001\002\000" +
    "\004\013\uffe6\001\002\000\010\016\uffe8\030\uffe8\031\uffe8" +
    "\001\002\000\010\014\063\022\037\023\041\001\002\000" +
    "\004\012\056\001\002\000\004\013\065\001\002\000\010" +
    "\016\uffe7\030\uffe7\031\uffe7\001\002\000\020\014\uffde\021" +
    "\uffde\022\uffde\023\uffde\027\uffde\030\uffde\031\uffde\001\002" +
    "\000\006\010\014\015\020\001\002\000\010\002\ufff0\010" +
    "\ufff0\015\ufff0\001\002\000\014\010\030\017\032\020\034" +
    "\025\031\026\035\001\002\000\010\021\073\022\037\023" +
    "\041\001\002\000\010\002\uffec\010\uffec\015\uffec\001\002" +
    "\000\010\004\ufffb\005\077\007\075\001\002\000\010\004" +
    "\ufffc\005\ufffc\007\ufffc\001\002\000\004\006\100\001\002" +
    "\000\010\004\ufffd\005\ufffd\007\ufffd\001\002\000\010\005" +
    "\ufffe\006\ufffe\007\ufffe\001\002\000\006\005\077\007\075" +
    "\001\002\000\010\004\ufffa\005\077\007\075\001\002\000" +
    "\006\005\077\007\075\001\002\000\006\005\077\007\075" +
    "\001\002\000\006\005\077\007\075\001\002\000\006\005" +
    "\077\007\075\001\002\000\006\005\077\007\075\001\002" +
    "\000\004\004\ufff9\001\002\000\004\002\001\001\002\000" +
    "\004\006\113\001\002\000\010\005\uffff\006\uffff\007\uffff" +
    "\001\002\000\010\005\117\006\116\007\115\001\002\000" +
    "\010\005\ufff8\006\ufff8\007\ufff8\001\002\000\012\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\001\002\000\012\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\001\002\000\010\005\117\006\116" +
    "\007\121\001\002\000\010\004\ufff8\005\ufff8\006\ufff8\001" +
    "\002\000\010\004\ufff5\005\117\006\116\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\014\002\006\003\011\006\010\007\007\010" +
    "\005\001\001\000\004\004\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\073\001\001\000\002\001\001\000\014\011\020" +
    "\012\021\013\015\014\014\022\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\066" +
    "\013\015\014\014\001\001\000\006\015\026\016\032\001" +
    "\001\000\002\001\001\000\010\012\022\013\015\014\014" +
    "\001\001\000\010\012\023\013\015\014\014\001\001\000" +
    "\010\012\024\013\015\014\014\001\001\000\010\012\025" +
    "\013\015\014\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\026\016\065\001\001" +
    "\000\002\001\001\000\010\020\043\021\045\023\044\001" +
    "\001\000\002\001\001\000\006\015\026\016\035\001\001" +
    "\000\002\001\001\000\006\015\026\016\042\001\001\000" +
    "\002\001\001\000\006\015\026\016\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\047\023\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\026\016\061\001\001\000" +
    "\006\015\026\016\052\001\001\000\002\001\001\000\004" +
    "\017\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\067\013\015" +
    "\014\014\001\001\000\002\001\001\000\006\015\026\016" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\101\001\001" +
    "\000\004\005\102\001\001\000\004\005\103\001\001\000" +
    "\004\005\104\001\001\000\004\005\105\001\001\000\004" +
    "\005\106\001\001\000\004\005\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\121" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbol_table = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, Boolean> symbol_table;

    public void syntax_error(Symbol current_symbol) {
      StringBuffer m = new StringBuffer("Error");

      if (current_symbol.left != -1) {                
        m.append(" in line " + (current_symbol.left+1));   
	    m.append(", column " + (current_symbol.right+1));
      }

      m.append(", symbol: " + (current_symbol));
      m.append(" : Syntax Error");
   
  	  System.err.println(m);
    } 

    public Object stack(int position) {
      return (((Symbol)stack.elementAt(tos+position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public class NameClass{
      public Integer att1;
      public String att2;
      
      NameClass(Integer a, String b){
        this.att1 = a;
        this.att2 = b;
      }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP execution 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tok2 ::= TOK2 TOK2 TOK2 
            { parser.Tree.reduce(3,"tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tok2 ::= tok2 TOK2 TOK2 
            { parser.Tree.reduce(3,"tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok13 ::= TOK1 
            { parser.Tree.reduce(1,"tok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok13 ::= TOK3 
            { parser.Tree.reduce(1,"tok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // first_tok ::= tok2 tok13 
            { parser.Tree.reduce(2,"first_tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_tok",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // first_tok ::= tok2 tok13 tok13 tok13 
            { parser.Tree.reduce(4,"first_tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_tok",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // first_tok ::= tok2 tok13 tok13 tok13 tok13 tok13 tok13 tok13 tok13 tok13 
            { parser.Tree.reduce(10,"first_tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("first_tok",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok12 ::= 
            { parser.Tree.reduce(0,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok12 ::= tok12 TOK1 
            { parser.Tree.reduce(2,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok12 ::= tok12 TOK2 
            { parser.Tree.reduce(2,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // second_tok ::= TOK3 tok12 TOK3 tok12 TOK3 tok12 
            { parser.Tree.reduce(6,"second_tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("second_tok",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header ::= first_tok 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // header ::= second_tok 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // execution ::= command_list 
            { parser.Tree.reduce(1,"execution",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command_list ::= command command command command command 
            { parser.Tree.reduce(5,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= ass 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= iff 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Boolean RESULT =null;
		
    RESULT = (Boolean) parser.stack(0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ass ::= VAR EQ bool_expr PV 
            { parser.Tree.reduce(4,"ass",0);
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    symbol_table.put(key, value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // iff ::= IF bool_expr comp_list FI 
            { parser.Tree.reduce(4,"iff",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iff",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comp_list ::= comp 
            { parser.Tree.reduce(1,"comp_list",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comp_list ::= comp_list comp 
            { parser.Tree.reduce(2,"comp_list",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comp ::= NT0 ANDW bool_expr DO print DONE 
            { parser.Tree.reduce(6,"comp",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        if (a && b){
            System.out.println(str);
        }
        RESULT = a && b; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comp ::= NT0 ORW bool_expr DO print DONE 
            { parser.Tree.reduce(6,"comp",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        if (a || b){
            System.out.println(str);
        }
        RESULT = a||b; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // print ::= PRINT QUOTEDS PV 
            { parser.Tree.reduce(3,"print",0);
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = (String) str;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_val ::= TRUE 
            { parser.Tree.reduce(1,"bool_val",0);
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_val",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_val ::= FALSE 
            { parser.Tree.reduce(1,"bool_val",0);
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_val",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bool_expr ::= bool_val 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_expr ::= VAR 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Boolean) symbol_table.get(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr ::= bool_expr AND bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a && b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr ::= bool_expr OR bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a || b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_expr ::= RO bool_expr RC 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_expr ::= NOT bool_expr 
            { parser.Tree.reduce(2,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = !a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
