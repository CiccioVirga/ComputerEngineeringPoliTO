import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.Iterator;


init with {:
    symbol_table = new HashMap<String, Boolean>();
:};

parser code {:
    public HashMap<String, Boolean> symbol_table;

    public void syntax_error(Symbol current_symbol) {
      StringBuffer m = new StringBuffer("Error");

      if (current_symbol.left != -1) {                
        m.append(" in line " + (current_symbol.left+1));   
	    m.append(", column " + (current_symbol.right+1));
      }

      m.append(", symbol: " + (current_symbol));
      m.append(" : Syntax Error");
   
  	  System.err.println(m);
    } 

    public Object stack(int position) {
      return (((Symbol)stack.elementAt(tos+position)).value);
    }
:};

//USE IT FOR WHEN YOU HAVE TO KEEP TOGETHER VALUES OF AN OBJECT, LIKE THE ATTRIBUTES OF EXAM 1
action code{:
    public class NameClass{
      public Integer att1;
      public String att2;
      
      NameClass(Integer a, String b){
        this.att1 = a;
        this.att2 = b;
      }
    }
:}



//////////////////////////////////
/////// TERMINAL SYMBOLS /////////
//////////////////////////////////

terminal SEP, TOK1, TOK2, TOK3;

terminal String VAR, QUOTEDS;
// terminal Double REAL;
// terminal Integer INT;

terminal PRINT, DONE, DO, IF, FI, TRUE, FALSE;
terminal PV, AND, OR, EQ, NOT;
terminal RO, RC; 
terminal ANDW, ORW;

//////////////////////////////////////
//////// NON TERMINAL SYMBOLS ////////
//////////////////////////////////////


non terminal Object prog;

// header
non terminal header;
non terminal tok12, tok13, tok2, first_tok, second_tok;

// execution
non terminal execution;
non terminal command;
non terminal ass;
non terminal iff;
non terminal Boolean bool_val;
non terminal Boolean bool_expr;
non terminal print;
non terminal Boolean comp;
non terminal Boolean comp_list;
non terminal command_list;
non terminal Boolean NT0;

//////////////////////////////////
/////////// PRECEDENCE ///////////
//////////////////////////////////

precedence left OR;
precedence left AND;
precedence left NOT;

/*
precedence left MINUS, PLUS;
precedence left DIV, STAR, DOT;
precedence left EXP;

precedence left UMINUS;
*/

/////////////////////
////// PARSER ///////
/////////////////////
start with prog;

prog ::= header SEP execution 
;

// header ====================================
tok2 ::= TOK2 TOK2 TOK2 | tok2 TOK2 TOK2;
tok13 ::= TOK1| TOK3;
first_tok ::= tok2 tok13 | tok2 tok13 tok13 tok13 | tok2 tok13 tok13 tok13 tok13 tok13 tok13 tok13 tok13 tok13;

tok12 ::= | tok12 TOK1 | tok12 TOK2;
second_tok ::= TOK3 tok12 TOK3 tok12 TOK3 tok12;

header ::= first_tok | second_tok;

// execution =================================

execution ::= command_list;

command_list ::= command command command command command
    | command_list command command
;

command ::= ass
    | iff
;

NT0 ::= {:
    RESULT = (Boolean) parser.stack(0);
:};

ass ::= VAR:key EQ bool_expr:value PV {:
    symbol_table.put(key, value);
:};

iff ::= IF bool_expr comp_list FI;

comp_list ::= comp:a   {: RESULT = a; :}
    | comp_list:a comp {: RESULT = a; :}
;


comp ::= NT0:a ANDW bool_expr:b DO print:str DONE {: 
        if (a && b){
            System.out.println(str);
        }
        RESULT = a && b; 
    :}
    | NT0:a ORW bool_expr:b DO print:str DONE {: 
        if (a || b){
            System.out.println(str);
        }
        RESULT = a||b; 
    :}
;

print ::= PRINT QUOTEDS:str PV {:
    RESULT = (String) str;
:};

bool_val ::= TRUE  {: RESULT = true; :} 
           | FALSE {: RESULT = false; :}
;

bool_expr ::= bool_val:a        {:RESULT = a;:}
  | VAR:v                       {:RESULT = (Boolean) symbol_table.get(v);:}
  | bool_expr:a AND bool_expr:b {:
        RESULT = a && b;
    :}
  | bool_expr:a OR bool_expr:b  {:RESULT = a || b;:}
  | RO bool_expr:a RC           {:RESULT = a;:}
  | NOT bool_expr:a             {:RESULT = !a;:}
;
